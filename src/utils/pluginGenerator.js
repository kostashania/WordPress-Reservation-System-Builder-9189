import JSZip from 'jszip'
import { saveAs } from 'file-saver'

export class PluginGenerator {
  constructor(section, userSettings = {}) {
    this.section = section
    this.userSettings = userSettings
    this.pluginData = this.preparePluginData()
  }

  preparePluginData() {
    const settings = this.section.settings
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-')
    const pluginSlug = this.sanitizeSlug(this.section.name)
    
    return {
      pluginName: this.section.name,
      pluginSlug,
      pluginVersion: '1.0.0',
      pluginDescription: `Table reservation form: ${this.section.name}`,
      timestamp,
      settings: {
        ...settings,
        // Inject user's sensitive data
        recaptcha_site_key: this.userSettings.recaptchaSiteKey || '',
        recaptcha_secret_key: this.userSettings.recaptchaSecretKey || '',
        notification_emails: this.userSettings.notificationEmails || '',
        smtp_host: this.userSettings.smtpHost || '',
        smtp_port: this.userSettings.smtpPort || 587,
        smtp_username: this.userSettings.smtpUsername || '',
        smtp_password: this.userSettings.smtpPassword || '',
        from_email: this.userSettings.fromEmail || '',
        from_name: this.userSettings.fromName || ''
      }
    }
  }

  sanitizeSlug(name) {
    return name.toLowerCase()
      .replace(/[^a-z0-9\s-]/g, '')
      .replace(/\s+/g, '-')
      .replace(/-+/g, '-')
      .substring(0, 50)
  }

  generateMainPluginFile() {
    const { pluginName, pluginSlug, pluginVersion, pluginDescription } = this.pluginData
    
    return `<?php
/*
Plugin Name: ${pluginName}
Plugin URI: https://questera.ai/table-reservation-builder
Description: ${pluginDescription} - Generated by Table Reservation Builder
Version: ${pluginVersion}
Author: Generated by Questera AI
Text Domain: ${pluginSlug}
Domain Path: /languages
License: GPL v2 or later
*/

defined('ABSPATH') or die('Direct access not allowed');

// Plugin constants
define('${pluginSlug.toUpperCase()}_VERSION', '${pluginVersion}');
define('${pluginSlug.toUpperCase()}_PLUGIN_DIR', plugin_dir_path(__FILE__));
define('${pluginSlug.toUpperCase()}_PLUGIN_URL', plugin_dir_url(__FILE__));

// Main plugin class
class ${this.toPascalCase(pluginSlug)}Plugin {
    
    private $settings;
    
    public function __construct() {
        $this->settings = ${JSON.stringify(this.pluginData.settings, null, 8).replace(/"/g, "'").replace(/'/g, "'")}
        
        add_action('wp_enqueue_scripts', array($this, 'enqueue_scripts'));
        add_action('init', array($this, 'init'));
        add_shortcode('${pluginSlug.replace(/-/g, '_')}_form', array($this, 'render_form'));
        add_action('wp_ajax_${pluginSlug.replace(/-/g, '_')}_submit', array($this, 'handle_submission'));
        add_action('wp_ajax_nopriv_${pluginSlug.replace(/-/g, '_')}_submit', array($this, 'handle_submission'));
        
        register_activation_hook(__FILE__, array($this, 'activate'));
    }
    
    public function activate() {
        $this->create_database_table();
    }
    
    public function init() {
        load_plugin_textdomain('${pluginSlug}', false, dirname(plugin_basename(__FILE__)) . '/languages');
    }
    
    public function enqueue_scripts() {
        wp_enqueue_style(
            '${pluginSlug}-style',
            ${pluginSlug.toUpperCase()}_PLUGIN_URL . 'assets/style.css',
            array(),
            ${pluginSlug.toUpperCase()}_VERSION
        );
        
        wp_enqueue_script(
            '${pluginSlug}-script',
            ${pluginSlug.toUpperCase()}_PLUGIN_URL . 'assets/script.js',
            array('jquery'),
            ${pluginSlug.toUpperCase()}_VERSION,
            true
        );
        
        wp_localize_script('${pluginSlug}-script', '${this.toCamelCase(pluginSlug)}Ajax', array(
            'ajaxUrl' => admin_url('admin-ajax.php'),
            'nonce' => wp_create_nonce('${pluginSlug}_nonce'),
            'recaptchaSiteKey' => $this->settings['recaptcha_site_key'],
            'enableRecaptcha' => !empty($this->settings['recaptcha_site_key'])
        ));
        
        // Load reCAPTCHA if configured
        if (!empty($this->settings['recaptcha_site_key'])) {
            wp_enqueue_script(
                'google-recaptcha',
                'https://www.google.com/recaptcha/api.js?render=' . $this->settings['recaptcha_site_key'],
                array(),
                null
            );
        }
    }
    
    public function render_form($atts) {
        $atts = shortcode_atts(array(
            'title' => $this->settings['title'],
            'subtitle' => $this->settings['subtitle'],
            'button_text' => $this->settings['buttonText']
        ), $atts);
        
        ob_start();
        include ${pluginSlug.toUpperCase()}_PLUGIN_DIR . 'templates/form.php';
        return ob_get_clean();
    }
    
    public function handle_submission() {
        // Verify nonce
        if (!wp_verify_nonce($_POST['nonce'], '${pluginSlug}_nonce')) {
            wp_send_json_error(array('message' => 'Security check failed'));
        }
        
        // Verify reCAPTCHA if enabled
        if (!empty($this->settings['recaptcha_secret_key']) && !empty($_POST['recaptcha_token'])) {
            $recaptcha_response = $this->verify_recaptcha($_POST['recaptcha_token']);
            if (!$recaptcha_response['success']) {
                wp_send_json_error(array('message' => $recaptcha_response['message']));
            }
        }
        
        // Validate and sanitize data
        $reservation_data = $this->validate_form_data($_POST);
        if (!$reservation_data['valid']) {
            wp_send_json_error(array('message' => $reservation_data['message']));
        }
        
        // Save to database
        $reservation_id = $this->save_reservation($reservation_data['data']);
        
        // Send notifications
        if (!empty($this->settings['notification_emails'])) {
            $this->send_email_notifications($reservation_data['data'], $reservation_id);
        }
        
        wp_send_json_success(array(
            'message' => 'Thank you! Your reservation has been submitted.',
            'reservation_id' => $reservation_id
        ));
    }
    
    private function create_database_table() {
        global $wpdb;
        
        $table_name = $wpdb->prefix . '${pluginSlug.replace(/-/g, '_')}_reservations';
        
        $charset_collate = $wpdb->get_charset_collate();
        
        $sql = "CREATE TABLE $table_name (
            id mediumint(9) NOT NULL AUTO_INCREMENT,
            reservation_date date NOT NULL,
            reservation_time time NOT NULL,
            guest_count smallint NOT NULL,
            customer_name varchar(100) NOT NULL,
            customer_email varchar(100) NOT NULL,
            customer_phone varchar(20),
            special_requests text,
            status varchar(20) DEFAULT 'pending',
            created_at datetime DEFAULT CURRENT_TIMESTAMP,
            PRIMARY KEY (id)
        ) $charset_collate;";
        
        require_once(ABSPATH . 'wp-admin/includes/upgrade.php');
        dbDelta($sql);
    }
    
    private function verify_recaptcha($token) {
        $response = wp_remote_post('https://www.google.com/recaptcha/api/siteverify', array(
            'body' => array(
                'secret' => $this->settings['recaptcha_secret_key'],
                'response' => $token
            )
        ));
        
        if (is_wp_error($response)) {
            return array('success' => false, 'message' => 'reCAPTCHA verification failed');
        }
        
        $body = json_decode(wp_remote_retrieve_body($response), true);
        
        if (!$body['success'] || $body['score'] < 0.5) {
            return array('success' => false, 'message' => 'Security verification failed');
        }
        
        return array('success' => true);
    }
    
    private function validate_form_data($data) {
        $errors = array();
        
        // Required field validation
        if (empty($data['customer_name'])) $errors[] = 'Name is required';
        if (empty($data['customer_email'])) $errors[] = 'Email is required';
        if (empty($data['reservation_date'])) $errors[] = 'Date is required';
        if (empty($data['reservation_time'])) $errors[] = 'Time is required';
        if (empty($data['guest_count'])) $errors[] = 'Guest count is required';
        
        // Email validation
        if (!empty($data['customer_email']) && !is_email($data['customer_email'])) {
            $errors[] = 'Please enter a valid email address';
        }
        
        // Date validation
        if (!empty($data['reservation_date'])) {
            $date = DateTime::createFromFormat('Y-m-d', $data['reservation_date']);
            if (!$date || $date < new DateTime('today')) {
                $errors[] = 'Please select a valid future date';
            }
        }
        
        if (!empty($errors)) {
            return array('valid' => false, 'message' => implode('<br>', $errors));
        }
        
        return array(
            'valid' => true,
            'data' => array(
                'customer_name' => sanitize_text_field($data['customer_name']),
                'customer_email' => sanitize_email($data['customer_email']),
                'customer_phone' => sanitize_text_field($data['customer_phone']),
                'reservation_date' => sanitize_text_field($data['reservation_date']),
                'reservation_time' => sanitize_text_field($data['reservation_time']),
                'guest_count' => intval($data['guest_count']),
                'special_requests' => sanitize_textarea_field($data['special_requests'])
            )
        );
    }
    
    private function save_reservation($data) {
        global $wpdb;
        
        $table_name = $wpdb->prefix . '${pluginSlug.replace(/-/g, '_')}_reservations';
        
        $wpdb->insert(
            $table_name,
            $data,
            array('%s', '%s', '%s', '%s', '%s', '%d', '%s')
        );
        
        return $wpdb->insert_id;
    }
    
    private function send_email_notifications($data, $reservation_id) {
        $to = explode("\\n", $this->settings['notification_emails']);
        $subject = 'New Table Reservation #' . $reservation_id;
        
        $message = "New reservation received:\\n\\n";
        $message .= "Name: " . $data['customer_name'] . "\\n";
        $message .= "Email: " . $data['customer_email'] . "\\n";
        $message .= "Phone: " . $data['customer_phone'] . "\\n";
        $message .= "Date: " . $data['reservation_date'] . "\\n";
        $message .= "Time: " . $data['reservation_time'] . "\\n";
        $message .= "Guests: " . $data['guest_count'] . "\\n";
        $message .= "Special Requests: " . $data['special_requests'] . "\\n";
        
        $headers = array();
        if (!empty($this->settings['from_email'])) {
            $headers[] = 'From: ' . $this->settings['from_name'] . ' <' . $this->settings['from_email'] . '>';
        }
        
        foreach ($to as $email) {
            if (is_email(trim($email))) {
                wp_mail(trim($email), $subject, $message, $headers);
            }
        }
        
        // Send confirmation to customer
        $customer_subject = 'Your Reservation Confirmation #' . $reservation_id;
        $customer_message = "Dear " . $data['customer_name'] . ",\\n\\n";
        $customer_message .= "Thank you for your reservation request. We will contact you soon to confirm.\\n\\n";
        $customer_message .= "Reservation Details:\\n";
        $customer_message .= "Date: " . $data['reservation_date'] . "\\n";
        $customer_message .= "Time: " . $data['reservation_time'] . "\\n";
        $customer_message .= "Guests: " . $data['guest_count'] . "\\n\\n";
        $customer_message .= "Best regards,\\n" . $this->settings['from_name'];
        
        wp_mail($data['customer_email'], $customer_subject, $customer_message, $headers);
    }
}

// Initialize the plugin
new ${this.toPascalCase(pluginSlug)}Plugin();
?>`
  }

  generateFormTemplate() {
    const { settings } = this.pluginData
    
    return `<?php defined('ABSPATH') or die('Direct access not allowed'); ?>

<div class="table-reservation-wrapper" data-color-scheme="${settings.colorScheme}" data-style="${settings.formStyle}">
    <div class="table-reservation-container">
        <h2 class="reservation-title"><?php echo esc_html($atts['title']); ?></h2>
        <p class="reservation-subtitle"><?php echo esc_html($atts['subtitle']); ?></p>
        
        <form class="table-reservation-form" method="post">
            <div class="form-messages" style="display: none;"></div>
            
            <div class="form-section">
                <div class="form-row">
                    ${settings.showDatePicker ? `
                    <div class="form-field">
                        <label for="reservation_date">Date <span class="required">*</span></label>
                        <input type="date" id="reservation_date" name="reservation_date" required class="form-control" min="<?php echo date('Y-m-d'); ?>">
                    </div>` : ''}
                    
                    ${settings.showTimePicker ? `
                    <div class="form-field">
                        <label for="reservation_time">Time <span class="required">*</span></label>
                        <input type="time" id="reservation_time" name="reservation_time" required class="form-control">
                    </div>` : ''}
                    
                    ${settings.showGuestCount ? `
                    <div class="form-field">
                        <label for="guest_count">Guests <span class="required">*</span></label>
                        <select id="guest_count" name="guest_count" required class="form-control">
                            <option value="">Select guests</option>
                            <?php for ($i = 1; $i <= ${settings.maxGuests || 12}; $i++): ?>
                                <option value="<?php echo $i; ?>"><?php echo $i; ?><?php echo $i === ${settings.maxGuests || 12} ? '+' : ''; ?></option>
                            <?php endfor; ?>
                        </select>
                    </div>` : ''}
                </div>
            </div>
            
            <div class="form-section">
                <div class="form-row">
                    <div class="form-field">
                        <label for="customer_name">Name <span class="required">*</span></label>
                        <input type="text" id="customer_name" name="customer_name" required placeholder="Your full name" class="form-control">
                    </div>
                    
                    <div class="form-field">
                        <label for="customer_email">Email <span class="required">*</span></label>
                        <input type="email" id="customer_email" name="customer_email" required placeholder="your@email.com" class="form-control">
                    </div>
                    
                    <div class="form-field">
                        <label for="customer_phone">Phone</label>
                        <input type="tel" id="customer_phone" name="customer_phone" placeholder="(123) 456-7890" class="form-control">
                    </div>
                </div>
            </div>
            
            ${settings.showSpecialRequests ? `
            <div class="form-section">
                <div class="form-field">
                    <label for="special_requests">Special Requests</label>
                    <textarea id="special_requests" name="special_requests" rows="3" placeholder="Any special requests..." class="form-control"></textarea>
                </div>
            </div>` : ''}
            
            <div class="form-actions">
                <button type="submit" class="reservation-submit-btn">
                    <span class="btn-text"><?php echo esc_html($atts['button_text']); ?></span>
                    <span class="btn-loading" style="display: none;">
                        <span class="spinner"></span>
                        Submitting...
                    </span>
                </button>
            </div>
        </form>
    </div>
</div>

<script>
jQuery(document).ready(function($) {
    $('.table-reservation-form').on('submit', function(e) {
        e.preventDefault();
        
        const $form = $(this);
        const $submitBtn = $form.find('.reservation-submit-btn');
        const $messages = $form.find('.form-messages');
        
        // Show loading state
        $submitBtn.prop('disabled', true);
        $submitBtn.find('.btn-text').hide();
        $submitBtn.find('.btn-loading').show();
        $messages.hide();
        
        const submitForm = function(recaptchaToken = '') {
            const formData = $form.serialize() + 
                '&action=${this.pluginData.pluginSlug.replace(/-/g, '_')}_submit' +
                '&nonce=' + ${this.toCamelCase(this.pluginData.pluginSlug)}Ajax.nonce +
                (recaptchaToken ? '&recaptcha_token=' + recaptchaToken : '');
            
            $.ajax({
                url: ${this.toCamelCase(this.pluginData.pluginSlug)}Ajax.ajaxUrl,
                type: 'POST',
                data: formData,
                dataType: 'json',
                success: function(response) {
                    if (response.success) {
                        $messages.html('<div class="success-message">' + response.data.message + '</div>').addClass('success').show();
                        $form[0].reset();
                    } else {
                        $messages.html('<div class="error-message">' + response.data.message + '</div>').addClass('error').show();
                    }
                },
                error: function() {
                    $messages.html('<div class="error-message">An error occurred. Please try again.</div>').addClass('error').show();
                },
                complete: function() {
                    $submitBtn.prop('disabled', false);
                    $submitBtn.find('.btn-text').show();
                    $submitBtn.find('.btn-loading').hide();
                }
            });
        };
        
        ${settings.recaptcha_site_key ? `
        if (typeof grecaptcha !== 'undefined') {
            grecaptcha.ready(function() {
                grecaptcha.execute('${settings.recaptcha_site_key}', {action: 'reservation'})
                    .then(function(token) {
                        submitForm(token);
                    })
                    .catch(function(error) {
                        submitForm();
                    });
            });
        } else {
            submitForm();
        }` : 'submitForm();'}
    });
});
</script>`
  }

  generateCSS() {
    const { settings } = this.pluginData
    
    return `/* Table Reservation Form Styles - Generated by Questera AI */

.table-reservation-wrapper {
    margin: 20px 0;
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
}

.table-reservation-container {
    background: ${this.getBackgroundStyle(settings)};
    border-radius: ${settings.borderRadius}px;
    padding: ${this.getPaddingValue(settings.padding)};
    max-width: ${settings.maxWidth};
    margin: 0 auto;
    box-shadow: ${this.getShadowStyle(settings.shadow)};
    text-align: ${settings.alignment};
    position: relative;
}

.reservation-title {
    font-size: 2rem;
    font-weight: 700;
    margin-bottom: 0.5rem;
    color: ${settings.titleColor};
}

.reservation-subtitle {
    font-size: 1.125rem;
    color: ${settings.subtitleColor};
    margin-bottom: 2rem;
}

.table-reservation-form {
    text-align: left;
}

.form-section {
    margin-bottom: 1.5rem;
}

.form-row {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 1rem;
    margin-bottom: 1rem;
}

.form-field {
    display: flex;
    flex-direction: column;
}

.form-field label {
    font-weight: 600;
    margin-bottom: 0.5rem;
    color: #2d3748;
    font-size: 0.875rem;
}

.required {
    color: #e53e3e;
}

.form-control {
    padding: 0.75rem;
    border: 2px solid #e2e8f0;
    border-radius: ${settings.buttonRadius}px;
    font-size: 1rem;
    transition: all 0.2s ease;
    background-color: #fff;
}

.form-control:focus {
    outline: none;
    border-color: ${settings.buttonColor};
    box-shadow: 0 0 0 3px ${settings.buttonColor}33;
}

.form-actions {
    text-align: center;
    margin-top: 2rem;
}

.reservation-submit-btn {
    background: ${this.getButtonBackground(settings)};
    color: ${settings.buttonTextColor};
    border: ${this.getButtonBorder(settings)};
    padding: ${this.getButtonPadding(settings.buttonSize)};
    font-size: ${this.getButtonFontSize(settings.buttonSize)};
    font-weight: 600;
    border-radius: ${settings.buttonRadius}px;
    cursor: pointer;
    transition: all 0.3s ease;
    position: relative;
    min-width: 200px;
}

.reservation-submit-btn:hover:not(:disabled) {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px ${settings.buttonColor}4d;
}

.reservation-submit-btn:disabled {
    opacity: 0.7;
    cursor: not-allowed;
}

.spinner {
    display: inline-block;
    width: 16px;
    height: 16px;
    border: 2px solid ${settings.buttonTextColor};
    border-radius: 50%;
    border-top-color: transparent;
    animation: spin 1s ease-in-out infinite;
    margin-right: 0.5rem;
}

@keyframes spin {
    to { transform: rotate(360deg); }
}

.form-messages {
    margin-bottom: 1rem;
}

.success-message {
    background-color: #c6f6d5;
    border: 1px solid #9ae6b4;
    color: #22543d;
    padding: 1rem;
    border-radius: 8px;
}

.error-message {
    background-color: #fed7d7;
    border: 1px solid #feb2b2;
    color: #742a2a;
    padding: 1rem;
    border-radius: 8px;
}

/* Responsive Design */
@media (max-width: 768px) {
    .table-reservation-container {
        padding: 1.5rem;
        margin: 10px;
    }
    
    .reservation-title {
        font-size: 1.5rem;
    }
    
    .form-row {
        grid-template-columns: 1fr;
    }
    
    .reservation-submit-btn {
        width: 100%;
    }
}`
  }

  generateJavaScript() {
    return `/* Table Reservation Form JavaScript - Generated by Questera AI */

(function($) {
    'use strict';
    
    $(document).ready(function() {
        initTableReservationForm();
    });
    
    function initTableReservationForm() {
        // Date constraints
        const $dateInput = $('input[type="date"]');
        if ($dateInput.length) {
            const today = new Date().toISOString().split('T')[0];
            $dateInput.attr('min', today);
            
            const maxDate = new Date();
            maxDate.setFullYear(maxDate.getFullYear() + 1);
            $dateInput.attr('max', maxDate.toISOString().split('T')[0]);
        }
        
        // Phone formatting
        $('input[type="tel"]').on('input', function() {
            let value = $(this).val().replace(/\\D/g, '');
            
            if (value.length >= 6) {
                value = value.replace(/(\\d{3})(\\d{3})(\\d{4})/, '($1) $2-$3');
            } else if (value.length >= 3) {
                value = value.replace(/(\\d{3})(\\d{0,3})/, '($1) $2');
            }
            
            $(this).val(value);
        });
        
        // Real-time validation
        $('.form-control').on('input change', function() {
            $(this).removeClass('error');
        });
        
        // Email validation
        $('input[type="email"]').on('blur', function() {
            const email = $(this).val();
            const emailPattern = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;
            
            if (email && !emailPattern.test(email)) {
                $(this).addClass('error');
            }
        });
    }
    
})(jQuery);`
  }

  getBackgroundStyle(settings) {
    if (settings.backgroundType === 'image' && settings.backgroundImage) {
      return `url(${settings.backgroundImage}) center/cover`
    }
    return settings.backgroundColor || '#ffffff'
  }

  getPaddingValue(padding) {
    const paddingMap = {
      small: '24px',
      medium: '32px',
      large: '48px'
    }
    return paddingMap[padding] || '32px'
  }

  getShadowStyle(shadow) {
    const shadowMap = {
      none: 'none',
      small: '0 1px 3px rgba(0,0,0,0.12)',
      medium: '0 4px 6px rgba(0,0,0,0.1)',
      large: '0 10px 15px rgba(0,0,0,0.1)'
    }
    return shadowMap[shadow] || shadowMap.medium
  }

  getButtonBackground(settings) {
    if (settings.buttonStyle === 'gradient') {
      return `linear-gradient(45deg, ${settings.buttonColor}, ${settings.buttonHoverColor || settings.buttonColor})`
    }
    if (settings.buttonStyle === 'outline') {
      return 'transparent'
    }
    return settings.buttonColor || '#3b82f6'
  }

  getButtonBorder(settings) {
    if (settings.buttonStyle === 'outline' || settings.buttonStyle === 'classic') {
      return `2px solid ${settings.buttonColor}`
    }
    return 'none'
  }

  getButtonPadding(size) {
    const sizeMap = {
      small: '8px 16px',
      medium: '12px 24px',
      large: '16px 32px'
    }
    return sizeMap[size] || sizeMap.medium
  }

  getButtonFontSize(size) {
    const sizeMap = {
      small: '14px',
      medium: '16px',
      large: '18px'
    }
    return sizeMap[size] || sizeMap.medium
  }

  toPascalCase(str) {
    return str.replace(/(^|-)(.)/g, (match, p1, p2) => p2.toUpperCase())
  }

  toCamelCase(str) {
    return str.replace(/-(.)/g, (match, p1) => p1.toUpperCase())
  }

  async generateZip() {
    const zip = new JSZip()
    const { pluginSlug } = this.pluginData
    
    // Main plugin file
    zip.file(`${pluginSlug}.php`, this.generateMainPluginFile())
    
    // Templates folder
    zip.folder('templates')
    zip.file('templates/form.php', this.generateFormTemplate())
    
    // Assets folder
    zip.folder('assets')
    zip.file('assets/style.css', this.generateCSS())
    zip.file('assets/script.js', this.generateJavaScript())
    
    // README
    zip.file('README.md', this.generateReadme())
    
    return await zip.generateAsync({ type: 'blob' })
  }

  generateReadme() {
    const { pluginName, pluginSlug, pluginDescription } = this.pluginData
    
    return `# ${pluginName}

${pluginDescription}

## Installation

1. Upload the plugin files to the \`/wp-content/plugins/${pluginSlug}/\` directory
2. Activate the plugin through the 'Plugins' screen in WordPress
3. Use the shortcode \`[${pluginSlug.replace(/-/g, '_')}_form]\` on any page or post

## Shortcode Usage

\`\`\`
[${pluginSlug.replace(/-/g, '_')}_form title="Custom Title" subtitle="Custom Subtitle" button_text="Book Now"]
\`\`\`

## Features

- Responsive design
- reCAPTCHA v3 spam protection
- Email notifications
- Database storage
- Customizable styling

## Generated by

Table Reservation Builder - https://questera.ai

## License

GPL v2 or later
`
  }

  async download() {
    try {
      const zipBlob = await this.generateZip()
      const filename = `${this.pluginData.pluginSlug}-${this.pluginData.timestamp}.zip`
      saveAs(zipBlob, filename)
      return true
    } catch (error) {
      console.error('Error generating plugin:', error)
      throw error
    }
  }
}

// Helper function to create and download plugin
export async function downloadPlugin(section, userSettings = {}) {
  const generator = new PluginGenerator(section, userSettings)
  return await generator.download()
}